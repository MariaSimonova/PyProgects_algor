"""
Приведен наивный алгоритм нахождения i-го по счёту
простого числа (через перебор делителей).

Попробуйте решить эту же задачу,
применив алгоритм "Решето эратосфена" (https://younglinux.info/algorithm/sieve)

Подсказка:
Сравните алгоритмы по времени на разных порядковых номерах чисел:
10, 100, 1000
Опишите результаты, сделайте выводы, где и какой алгоритм эффективнее
Подумайте и по возможности определите сложность каждого алгоритма
"""

import timeit


def simple(i):
    """Без использования «Решета Эратосфена»"""
    count = 1
    n = 2
    while count <= i:
        t = 1
        is_simple = True
        while t <= n:
            if n % t == 0 and t != 1 and t != n:
                is_simple = False
                break
            t += 1
        if is_simple:
            if count == i:
                break
            count += 1
        n += 1
    return n


def my_func(num):
    n = num * 10
    a = list(range(n + 1))
    a[1] = 0
    lst = []

    i = 2
    while i <= n:
        if a[i] != 0:
            lst.append(a[i])
            for j in range(i, n + 1, i):
                a[j] = 0
        i += 1
    return lst[num - 1]


i = int(input('Введите порядковый номер искомого простого числа: '))
print(simple(i))
print(my_func(i))

print(timeit.timeit("simple(i)", setup="from __main__ import simple, i", number=100))
print(timeit.timeit("my_func(i)", setup="from __main__ import my_func, i", number=100))

"""В первом случае вычисление имеет квдратичную сложность, во втором, благодаря
использованию Решета Эратосфена, вычесление имеет логарифмическую сложность. 
Особенно разница заметна при  i = 1000.

для i = 10:
29
29
0.011517099999999836
0.013626300000000313

для i = 100:
541
541
1.5573600000000005
0.1322706999999994

для i = 1000:
7919
7919
116.68205950000001
0.7086667000000091
"""
